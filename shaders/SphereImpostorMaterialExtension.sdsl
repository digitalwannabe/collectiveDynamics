shader SphereImpostorMaterialExtension : ParticleProvider, TransformationBase, PositionStream4, Texturing, ShadingBase, ShaderUtils
{
    // we cannot use data input here
    // data will from the patch will be put in via an implementaion of the ParticleProvider shader

    // override the vertex shader methods that handle position 
    stage override void PreTransformPosition() 
    {
        streams.VID = streams.VertexID;
        streams.PositionWS = streams.Position;
    }

    stage override void TransformPosition() {}

    // At the end of the geometry pipeline (to generate ShadingPosition)
    stage override void PostTransformPosition()
    {
        streams.ShadingPosition = streams.PositionWS;
    }

    // custom geometry shader, quad particle in this case
    [maxvertexcount(4)]
    stage void GSMain(point Input input[1], inout TriangleStream<Output> triangleStream)
    {
        streams = input[0];

        // get data from ParticleProvider implementation
        streams.PositionWS = GetWorldPosition();
        float pSize = GetParticleSize();

        for (int i=0; i<4; i++)
        {
            streams.TexCoord  = QuadUV[i].xy * 2 - 1; //center and scale for sphere impostor

            float4 posView = mul(streams.PositionWS, WorldView);
            posView.xyz += QuadPositions[i].xyz * pSize;
            streams.ShadingPosition = mul(posView, Projection);

            triangleStream.Append(streams);
        }     
    }

    //override shading, create sphere impostor in this case
    stage override float4 Shading() 
    {
        float2 mapping = streams.TexCoord;
        float lenSqr = dot(mapping, mapping);
        if (lenSqr > 1)
            discard; // Circles
        
        float z = sqrt(1 - lenSqr);

        float3 normal = float3(mapping, z);
        normal = normalize(mul(float4(normal, 0), ViewInverse).xyz);

        streams.normalWS = normal;
        streams.meshNormalWS = normal;

        float4 posQuad = streams.PositionWS;
        posQuad.z += z;
        float4 PosWVP = mul(posQuad, ViewProjection);
        streams.DepthVS = PosWVP.w;
        streams.DepthLessEqual = PosWVP.z/PosWVP.w;

        return base.Shading();
    }
};